// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// test_g
double test_g(double th, double x, double alpha, double beta);
RcppExport SEXP stablecpp_test_g(SEXP thSEXP, SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type th(thSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    __result = Rcpp::wrap(test_g(th, x, alpha, beta));
    return __result;
END_RCPP
}
// guess_test
double guess_test(double p, double alpha, double beta, int lower_tail, int log_p);
RcppExport SEXP stablecpp_guess_test(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< int >::type log_p(log_pSEXP);
    __result = Rcpp::wrap(guess_test(p, alpha, beta, lower_tail, log_p));
    return __result;
END_RCPP
}
// q_guess
double q_guess(double p, double alpha, double beta, int lower_tail, int log_p);
RcppExport SEXP stablecpp_q_guess(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< int >::type log_p(log_pSEXP);
    __result = Rcpp::wrap(q_guess(p, alpha, beta, lower_tail, log_p));
    return __result;
END_RCPP
}
// sdstable
NumericVector sdstable(NumericVector x, double alpha, double beta, int log_flag, double tol, double zeta_tol, int subdivisions, int verbose);
RcppExport SEXP stablecpp_sdstable(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP log_flagSEXP, SEXP tolSEXP, SEXP zeta_tolSEXP, SEXP subdivisionsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type log_flag(log_flagSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type zeta_tol(zeta_tolSEXP);
    Rcpp::traits::input_parameter< int >::type subdivisions(subdivisionsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(sdstable(x, alpha, beta, log_flag, tol, zeta_tol, subdivisions, verbose));
    return __result;
END_RCPP
}
// spstable
NumericVector spstable(NumericVector z, double alpha, double beta, int lower_tail, int log_p, double dbltol, int subdivisions, int verbose);
RcppExport SEXP stablecpp_spstable(SEXP zSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP dbltolSEXP, SEXP subdivisionsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< int >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< double >::type dbltol(dbltolSEXP);
    Rcpp::traits::input_parameter< int >::type subdivisions(subdivisionsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(spstable(z, alpha, beta, lower_tail, log_p, dbltol, subdivisions, verbose));
    return __result;
END_RCPP
}
// sqstable
NumericVector sqstable(NumericVector p, double alpha, double beta, int lower_tail, int log_p, double dbltol, double integ_tol, int subdivisions, int verbose);
RcppExport SEXP stablecpp_sqstable(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP dbltolSEXP, SEXP integ_tolSEXP, SEXP subdivisionsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< int >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< double >::type dbltol(dbltolSEXP);
    Rcpp::traits::input_parameter< double >::type integ_tol(integ_tolSEXP);
    Rcpp::traits::input_parameter< int >::type subdivisions(subdivisionsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(sqstable(p, alpha, beta, lower_tail, log_p, dbltol, integ_tol, subdivisions, verbose));
    return __result;
END_RCPP
}
// sdstableMode
double sdstableMode(double alpha, double beta, double beta_max, double tol, int verbose);
RcppExport SEXP stablecpp_sdstableMode(SEXP alphaSEXP, SEXP betaSEXP, SEXP beta_maxSEXP, SEXP tolSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type beta_max(beta_maxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(sdstableMode(alpha, beta, beta_max, tol, verbose));
    return __result;
END_RCPP
}
// cubic_spline
NumericVector cubic_spline(NumericVector x, NumericVector x_knots, NumericVector y_knots, bool isclamped, NumericVector deriv);
RcppExport SEXP stablecpp_cubic_spline(SEXP xSEXP, SEXP x_knotsSEXP, SEXP y_knotsSEXP, SEXP isclampedSEXP, SEXP derivSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type x_knots(x_knotsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type y_knots(y_knotsSEXP);
    Rcpp::traits::input_parameter< bool >::type isclamped(isclampedSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type deriv(derivSEXP);
    __result = Rcpp::wrap(cubic_spline(x, x_knots, y_knots, isclamped, deriv));
    return __result;
END_RCPP
}
// sdstable_quick
NumericVector sdstable_quick(NumericVector x, double alpha, double beta, double tol, double zeta_tol, int subdivisions, int verbose);
RcppExport SEXP stablecpp_sdstable_quick(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP tolSEXP, SEXP zeta_tolSEXP, SEXP subdivisionsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type zeta_tol(zeta_tolSEXP);
    Rcpp::traits::input_parameter< int >::type subdivisions(subdivisionsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    __result = Rcpp::wrap(sdstable_quick(x, alpha, beta, tol, zeta_tol, subdivisions, verbose));
    return __result;
END_RCPP
}
