// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// dstable_cpp
NumericVector dstable_cpp(Eigen::VectorXd x, double alpha, double beta, Eigen::VectorXd gamma, Eigen::VectorXd delta, int pm, int log_flag, double tol, int subdivisions, int verbose);
RcppExport SEXP _RcppStable_dstable_cpp(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP pmSEXP, SEXP log_flagSEXP, SEXP tolSEXP, SEXP subdivisionsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< int >::type log_flag(log_flagSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type subdivisions(subdivisionsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(dstable_cpp(x, alpha, beta, gamma, delta, pm, log_flag, tol, subdivisions, verbose));
    return rcpp_result_gen;
END_RCPP
}
// dstable_quick
NumericVector dstable_quick(Eigen::VectorXd x, double alpha, double beta, Eigen::VectorXd gamma, Eigen::VectorXd delta, int pm, int log_flag, double tol, int subdivisions, int verbose);
RcppExport SEXP _RcppStable_dstable_quick(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP pmSEXP, SEXP log_flagSEXP, SEXP tolSEXP, SEXP subdivisionsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< int >::type log_flag(log_flagSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type subdivisions(subdivisionsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(dstable_quick(x, alpha, beta, gamma, delta, pm, log_flag, tol, subdivisions, verbose));
    return rcpp_result_gen;
END_RCPP
}
// pstable_cpp
NumericVector pstable_cpp(Eigen::VectorXd z, double alpha, double beta, Eigen::VectorXd gamma, Eigen::VectorXd delta, int pm, int lower_tail, int log_p, double dbltol, int subdivisions, int verbose);
RcppExport SEXP _RcppStable_pstable_cpp(SEXP zSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP pmSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP dbltolSEXP, SEXP subdivisionsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< int >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< int >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< double >::type dbltol(dbltolSEXP);
    Rcpp::traits::input_parameter< int >::type subdivisions(subdivisionsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(pstable_cpp(z, alpha, beta, gamma, delta, pm, lower_tail, log_p, dbltol, subdivisions, verbose));
    return rcpp_result_gen;
END_RCPP
}
// qstable_cpp
NumericVector qstable_cpp(Eigen::VectorXd p, double alpha, double beta, Eigen::VectorXd gamma, Eigen::VectorXd delta, int pm, int lower_tail, int log_p, double dbltol, double integ_tol, int subdivisions, int verbose);
RcppExport SEXP _RcppStable_qstable_cpp(SEXP pSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP pmSEXP, SEXP lower_tailSEXP, SEXP log_pSEXP, SEXP dbltolSEXP, SEXP integ_tolSEXP, SEXP subdivisionsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type p(pSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< int >::type lower_tail(lower_tailSEXP);
    Rcpp::traits::input_parameter< int >::type log_p(log_pSEXP);
    Rcpp::traits::input_parameter< double >::type dbltol(dbltolSEXP);
    Rcpp::traits::input_parameter< double >::type integ_tol(integ_tolSEXP);
    Rcpp::traits::input_parameter< int >::type subdivisions(subdivisionsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(qstable_cpp(p, alpha, beta, gamma, delta, pm, lower_tail, log_p, dbltol, integ_tol, subdivisions, verbose));
    return rcpp_result_gen;
END_RCPP
}
// ddx_sdstable
NumericVector ddx_sdstable(Eigen::VectorXd x, double alpha, double beta, int pm, double tol, int subdivisions, int verbose);
RcppExport SEXP _RcppStable_ddx_sdstable(SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP, SEXP pmSEXP, SEXP tolSEXP, SEXP subdivisionsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< int >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type subdivisions(subdivisionsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(ddx_sdstable(x, alpha, beta, pm, tol, subdivisions, verbose));
    return rcpp_result_gen;
END_RCPP
}
// rstable_cpp
NumericVector rstable_cpp(double alpha, double beta, Eigen::VectorXd gamma, Eigen::VectorXd delta, int pm, Eigen::VectorXd u1, Eigen::VectorXd u2);
RcppExport SEXP _RcppStable_rstable_cpp(SEXP alphaSEXP, SEXP betaSEXP, SEXP gammaSEXP, SEXP deltaSEXP, SEXP pmSEXP, SEXP u1SEXP, SEXP u2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< int >::type pm(pmSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type u2(u2SEXP);
    rcpp_result_gen = Rcpp::wrap(rstable_cpp(alpha, beta, gamma, delta, pm, u1, u2));
    return rcpp_result_gen;
END_RCPP
}
// sdstableMode
double sdstableMode(double alpha, double beta, double dbltol, double tol, int subdivisions, int verbose);
RcppExport SEXP _RcppStable_sdstableMode(SEXP alphaSEXP, SEXP betaSEXP, SEXP dbltolSEXP, SEXP tolSEXP, SEXP subdivisionsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type dbltol(dbltolSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< int >::type subdivisions(subdivisionsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sdstableMode(alpha, beta, dbltol, tol, subdivisions, verbose));
    return rcpp_result_gen;
END_RCPP
}
// stable_fit_cpp
DataFrame stable_fit_cpp(Eigen::VectorXd y, std::string type, bool quick);
RcppExport SEXP _RcppStable_stable_fit_cpp(SEXP ySEXP, SEXP typeSEXP, SEXP quickSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type type(typeSEXP);
    Rcpp::traits::input_parameter< bool >::type quick(quickSEXP);
    rcpp_result_gen = Rcpp::wrap(stable_fit_cpp(y, type, quick));
    return rcpp_result_gen;
END_RCPP
}
// g_map_dataframe
DataFrame g_map_dataframe(int type, double x, double alpha, double beta);
RcppExport SEXP _RcppStable_g_map_dataframe(SEXP typeSEXP, SEXP xSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< double >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(g_map_dataframe(type, x, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppStable_dstable_cpp", (DL_FUNC) &_RcppStable_dstable_cpp, 10},
    {"_RcppStable_dstable_quick", (DL_FUNC) &_RcppStable_dstable_quick, 10},
    {"_RcppStable_pstable_cpp", (DL_FUNC) &_RcppStable_pstable_cpp, 11},
    {"_RcppStable_qstable_cpp", (DL_FUNC) &_RcppStable_qstable_cpp, 12},
    {"_RcppStable_ddx_sdstable", (DL_FUNC) &_RcppStable_ddx_sdstable, 7},
    {"_RcppStable_rstable_cpp", (DL_FUNC) &_RcppStable_rstable_cpp, 7},
    {"_RcppStable_sdstableMode", (DL_FUNC) &_RcppStable_sdstableMode, 6},
    {"_RcppStable_stable_fit_cpp", (DL_FUNC) &_RcppStable_stable_fit_cpp, 3},
    {"_RcppStable_g_map_dataframe", (DL_FUNC) &_RcppStable_g_map_dataframe, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppStable(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
